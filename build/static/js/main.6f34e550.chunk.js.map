{"version":3,"sources":["Nav/Nav.tsx","Box/Box.tsx","Pagination/Pagination.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","className","href","Box","props","title","description","tags","map","tagName","Pagination","App","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAEaA,G,UAAM,kBACf,yBAAKC,UAAU,kBACX,0CACA,wBAAIA,UAAU,YACZ,wBAAIA,UAAU,UAAS,uBAAGC,KAAK,KAAR,aACvB,4BAAI,uBAAGA,KAAK,KAAR,WACJ,4BAAI,uBAAGA,KAAK,KAAR,iBACJ,4BAAI,uBAAGA,KAAK,KAAR,cACJ,4BAAI,uBAAGA,KAAK,KAAR,wBCRDC,EAAM,SAACC,GAAD,OACf,4BACI,yBAAKH,UAAU,YACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,eACX,4BAAKG,EAAMC,OACf,2BAAID,EAAME,cAEV,yBAAKL,UAAU,QACVG,EAAMG,KAAKC,KAAI,SAACC,GAAD,sBACPA,EADO,kBAK5B,yBAAKR,UAAU,oBACX,4BACA,4BAAI,uCAAJ,IAAuB,mCAAQ,gCAC/B,4BAAI,8CAAJ,IAA8B,oCAAS,+CClB1CS,EAAa,kBACtB,wBAAIT,UAAU,cACV,4BAAI,uBAAGC,KAAK,KAAR,MACJ,4BAAI,uBAAGA,KAAK,KAAR,MACJ,wBAAID,UAAU,UAAS,uBAAGC,KAAK,KAAR,MACvB,4BAAI,uBAAGA,KAAK,KAAR,MACJ,4BAAI,uBAAGA,KAAK,KAAR,QCkBGS,MAnBf,WACE,OACE,yBAAKV,UAAU,kBACb,kBAAC,EAAD,MADF,IAEE,6BAASA,UAAU,aACjB,gCACE,2BAAOW,KAAK,OAAOC,YAAY,mBAEjC,4BACE,kBAAC,EAAD,CAAKR,MAAM,eAAeC,YAAY,+CAA+CC,KAAK,qDAD5F,IAEE,kBAAC,EAAD,CAAKF,MAAM,eAAeC,YAAY,wEAAwEC,KAAK,eAFrH,IAGE,kBAAC,EAAD,CAAKF,MAAM,aAAaC,YAAY,uDAAuDC,KAAK,kBAElG,kBAAC,EAAD,SCRYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f34e550.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Nav = () => (\n    <nav className=\"nav-categories\">\n        <h2>Categories</h2>\n        <ul className=\"nav-menu\">\n          <li className=\"active\"><a href=\"#\">Channels</a></li>\n          <li><a href=\"#\">Dialer</a></li>\n          <li><a href=\"#\">Optimization</a></li>\n          <li><a href=\"#\">Reporting</a></li>\n          <li><a href=\"#\">Voice Analytics</a></li>\n        </ul>\n      </nav>\n)","import React from \"react\";\n\nexport const Box = (props) => (\n    <li>\n        <div className=\"app-item\">\n            <div className=\"box-info\">\n                <div className=\"box-info--content\">\n                    <div className=\"description\">\n                        <h1>{props.title}</h1>\n                    <p>{props.description}</p>\n                    </div>\n                    <div className=\"tags\">\n                        {props.tags.map((tagName) => (\n                        `<span>${tagName}</span> /`\n                        ))}\n                    </div>\n                </div>\n            <div className=\"box-info--footer\">\n                <ul>                    \n                <li><span>Trial</span> <h3>Free<sup></sup></h3></li>\n                <li><span>Professional</span> <h3>35.00<sup>â‚¬</sup></h3></li>\n                </ul>\n            </div>\n            </div>\n        </div>\n    </li>\n)","import React from \"react\";\n\nexport const Pagination = () => (\n    <ul className=\"pagination\">\n        <li><a href=\"#\">&lt;</a></li>\n        <li><a href=\"#\">1</a></li>\n        <li className=\"active\"><a href=\"#\">2</a></li>\n        <li><a href=\"#\">3</a></li>\n        <li><a href=\"#\">&gt;</a></li>\n    </ul>\n)","import React from 'react';\nimport './App.css';\n\nimport { Nav } from './Nav/Nav';\nimport { Box } from './Box/Box';\nimport { Pagination } from './Pagination/Pagination';\n\nfunction App() {\n  return (\n    <div className=\"flex-container\">\n      <Nav />,\n      <section className=\"apps-list\">\n        <header>\n          <input type=\"text\" placeholder=\"Search by App\" />\n        </header>\n        <ul>\n          <Box title=\"Voice Report\" description=\"Calls reporting and analytics of your calls.\" tags=\"['Voice Analytics', 'Reporting', 'Optimization']\"/>,\n          <Box title=\"Power Dialer\" description=\"Auto dialer that will help increase your connect rates and talk time.\" tags=\"['Dialer']\"/>,\n          <Box title=\"Smart Text\" description=\"Use SMS to help you communicate with your customers.\" tags=\"['Channels']\"/>\n        </ul>\n        <Pagination />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}