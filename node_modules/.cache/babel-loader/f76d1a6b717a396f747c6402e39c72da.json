{"ast":null,"code":"var _jsxFileName = \"/Users/rafaelfecha/app-list-mini-challenge/src/components/App/App.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { Nav } from \"../Nav/Nav\";\nimport { Box } from \"../Box/Box\";\nimport { Pagination } from \"../Pagination/Pagination\";\nimport { compareBySumOfPlansPrice, filterAppsByCategory, getCategories, paginate, getPagesNumber } from \"../../utils/utils\";\nimport { PAGE_SIZE } from \"../../config/config\";\n\nconst App = () => {\n  var _paginate;\n\n  const [appsData, setAppsData] = useState([]);\n  const [displayedApps, setDisplayedApps] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [categories, setCategories] = useState([]);\n  const [totalPages, setTotalPages] = useState(1);\n  /**\n   * A method that handles the request to get the application data.\n   * Later, the app's data state will be updated and the displayed app's\n   * state as well.\n   *\n   * @returns {Promise<void>}\n   */\n\n  const fetchAppData = async () => {\n    debugger;\n\n    try {\n      const {\n        data\n      } = await axios.get(\"apps.json\");\n      setAppsData(data);\n      const sortedApps = data === null || data === void 0 ? void 0 : data.sort(compareBySumOfPlansPrice);\n      setDisplayedApps(sortedApps);\n      setTotalPages(getPagesNumber(sortedApps));\n      setCategories(getCategories(data));\n    } catch (err) {\n      console.error(`Error on step fetching apps data: ${err}`);\n    }\n  };\n  /**\n   * A method that is triggered when one of the nav category items is clicked by the user.\n   * In the end, it will be displayed to the user just the apps which belong to the clicked\n   * category item in the nav.\n   *\n   * @param {string} category - clicked category item.\n   * @returns {void}\n   */\n\n\n  const handleCategoryClick = category => {\n    try {\n      const appsFilteredByCategory = filterAppsByCategory(appsData, category).sort(compareBySumOfPlansPrice);\n      setSelectedCategory(category);\n      setPageNumber(1);\n      setDisplayedApps(appsFilteredByCategory);\n      setTotalPages(getPagesNumber(appsFilteredByCategory));\n    } catch (err) {\n      console.error(`Error on step filtering apps data by category: ${err}`);\n    }\n  };\n  /**\n   * A method that is triggered when one of the pagination numbers is clicked by the user.\n   * In the end, it will be displayed to the user just the apps which belong to the clicked\n   * pagination number.\n   *\n   * @param {number} pageNumber - clicked page number.\n   * @returns {void}\n   */\n\n\n  const handlePaginationClick = pageNumber => {\n    try {\n      if (0 < pageNumber && pageNumber <= totalPages) {\n        setPageNumber(pageNumber);\n      }\n    } catch (err) {\n      console.error(`Error on step setting pagination number: ${err}`);\n    }\n  };\n  /**\n   * A method that is triggered when the user types something in the search bar.\n   * In the end, it will be displayed to the user just the app's which name matches\n   * the input value typed in the search.\n   *\n   * @param {ChangeEvent<HTMLInputElement>} event - event triggered when search bar input value is changed.\n   * @returns {void}\n   */\n\n\n  const handleInputChange = event => {\n    try {\n      var _event$currentTarget;\n\n      const appsFilteredByAppName = (event === null || event === void 0 ? void 0 : (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : _event$currentTarget.value) ? appsData === null || appsData === void 0 ? void 0 : appsData.filter(({\n        name\n      }) => name.toLowerCase().indexOf(event.currentTarget.value.toLowerCase()) > -1).sort(compareBySumOfPlansPrice) : appsData;\n      setSelectedCategory('');\n      setPageNumber(1);\n      setDisplayedApps(appsFilteredByAppName);\n      setTotalPages(getPagesNumber(appsFilteredByAppName));\n    } catch (err) {\n      console.error(`Error on step filtering apps by appName on search field: ${err}`);\n    }\n  };\n\n  useEffect(() => {\n    fetchAppData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    categories: categories,\n    onCategoryClick: handleCategoryClick,\n    activeCategory: selectedCategory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), \",\", /*#__PURE__*/React.createElement(\"section\", {\n    className: \"apps-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search App\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, (_paginate = paginate(displayedApps, PAGE_SIZE, pageNumber)) === null || _paginate === void 0 ? void 0 : _paginate.map(apps => /*#__PURE__*/React.createElement(Box, {\n    key: apps.id,\n    id: apps.id,\n    name: apps.name,\n    description: apps.description,\n    categories: apps.categories,\n    subscriptions: apps.subscriptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Pagination, {\n    pagesNumber: totalPages,\n    onClickPagination: handlePaginationClick,\n    activePage: pageNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/rafaelfecha/app-list-mini-challenge/src/components/App/App.tsx"],"names":["React","useEffect","useState","axios","Nav","Box","Pagination","compareBySumOfPlansPrice","filterAppsByCategory","getCategories","paginate","getPagesNumber","PAGE_SIZE","App","appsData","setAppsData","displayedApps","setDisplayedApps","pageNumber","setPageNumber","selectedCategory","setSelectedCategory","categories","setCategories","totalPages","setTotalPages","fetchAppData","data","get","sortedApps","sort","err","console","error","handleCategoryClick","category","appsFilteredByCategory","handlePaginationClick","handleInputChange","event","appsFilteredByAppName","currentTarget","value","filter","name","toLowerCase","indexOf","map","apps","id","description","subscriptions"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, ChangeEvent } from \"react\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\n\nimport { Nav } from \"../Nav/Nav\";\nimport { Box } from \"../Box/Box\";\nimport { Pagination } from \"../Pagination/Pagination\";\n\nimport { IApp } from \"../../interfaces/app.interfaces\";\n\nimport {\n  compareBySumOfPlansPrice,\n  filterAppsByCategory,\n  getCategories,\n  paginate,\n  getPagesNumber,\n} from \"../../utils/utils\";\nimport { PAGE_SIZE } from \"../../config/config\";\n\nconst App = () => {\n  const [appsData, setAppsData] = useState<IApp[]>([]);\n  const [displayedApps, setDisplayedApps] = useState<IApp[]>([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [categories, setCategories] = useState<string[]>([]);\n  const [totalPages, setTotalPages] = useState(1);\n\n  /**\n   * A method that handles the request to get the application data.\n   * Later, the app's data state will be updated and the displayed app's\n   * state as well.\n   *\n   * @returns {Promise<void>}\n   */\n  const fetchAppData = async () => {\n    debugger;\n    try {\n      const { data } = await axios.get<IApp[]>(\"apps.json\");\n      setAppsData(data);\n      const sortedApps = data?.sort(compareBySumOfPlansPrice);\n      setDisplayedApps(sortedApps);\n      setTotalPages(getPagesNumber(sortedApps));\n      setCategories(getCategories(data))\n    } catch (err) {\n      console.error(`Error on step fetching apps data: ${err}`);\n    }\n  };\n\n  /**\n   * A method that is triggered when one of the nav category items is clicked by the user.\n   * In the end, it will be displayed to the user just the apps which belong to the clicked\n   * category item in the nav.\n   *\n   * @param {string} category - clicked category item.\n   * @returns {void}\n   */\n  const handleCategoryClick = (category: string) => {\n    try {\n      const appsFilteredByCategory = filterAppsByCategory(appsData, category).sort(\n        compareBySumOfPlansPrice\n      );\n      setSelectedCategory(category);\n      setPageNumber(1);\n      setDisplayedApps(appsFilteredByCategory);\n      setTotalPages(getPagesNumber(appsFilteredByCategory));\n    } catch (err) {\n      console.error(`Error on step filtering apps data by category: ${err}`);\n    }\n  };\n\n  /**\n   * A method that is triggered when one of the pagination numbers is clicked by the user.\n   * In the end, it will be displayed to the user just the apps which belong to the clicked\n   * pagination number.\n   *\n   * @param {number} pageNumber - clicked page number.\n   * @returns {void}\n   */\n  const handlePaginationClick = (pageNumber: number) => {\n    try {\n      if (0 < pageNumber && pageNumber <= totalPages) {\n        setPageNumber(pageNumber);\n      }\n    } catch (err) {\n      console.error(`Error on step setting pagination number: ${err}`);\n    }\n  };\n\n  /**\n   * A method that is triggered when the user types something in the search bar.\n   * In the end, it will be displayed to the user just the app's which name matches\n   * the input value typed in the search.\n   *\n   * @param {ChangeEvent<HTMLInputElement>} event - event triggered when search bar input value is changed.\n   * @returns {void}\n   */\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    try {\n      const appsFilteredByAppName = event?.currentTarget?.value\n        ? appsData\n            ?.filter(\n              ({ name }) =>\n                name.toLowerCase().indexOf(event.currentTarget.value.toLowerCase()) > -1\n            )\n            .sort(compareBySumOfPlansPrice)\n        : appsData;\n      setSelectedCategory('');\n      setPageNumber(1);\n      setDisplayedApps(appsFilteredByAppName);\n      setTotalPages(getPagesNumber(appsFilteredByAppName));\n    } catch (err) {\n      console.error(\n        `Error on step filtering apps by appName on search field: ${err}`\n      );\n    }\n  };\n\n  useEffect(() => {\n    fetchAppData();\n  }, []);\n\n  return (\n    <div className=\"flex-container\">\n      <Nav\n        categories={categories}\n        onCategoryClick={handleCategoryClick}\n        activeCategory={selectedCategory}\n      />\n      ,\n      <section className=\"apps-list\">\n        <header>\n          <input\n            type=\"text\"\n            placeholder=\"Search App\"\n            onChange={handleInputChange}\n          />\n        </header>\n        <ul>\n          {paginate(displayedApps, PAGE_SIZE, pageNumber)?.map((apps) => (\n            <Box\n              key={apps.id}\n              id={apps.id}\n              name={apps.name}\n              description={apps.description}\n              categories={apps.categories}\n              subscriptions={apps.subscriptions}\n            />\n          ))}\n        </ul>\n        <Pagination\n          pagesNumber={totalPages}\n          onClickPagination={handlePaginationClick}\n          activePage={pageNumber}\n        />\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}